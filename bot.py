import logging
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import os
import asyncio
import subprocess
import sys
from aiogram.types import FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
import shutil
import zipfile

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

#API_TOKEN = '7933511249:AAFYQ_cbX6io6vvTQZI6S-0iZjquF0ILGHA'
API_TOKEN = '7846606479:AAHKVA6VyRHU76H8nT9yjmNA8L4QFz3gl5U'
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

UPLOAD_FOLDER = os.path.join(BASE_DIR, 'input_data')
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

OUTPUT_FOLDER = os.path.join(BASE_DIR, 'output')
os.makedirs(OUTPUT_FOLDER, exist_ok=True)



# UPLOAD_FOLDER = 'input_data'
# os.makedirs(UPLOAD_FOLDER, exist_ok=True)
# OUTPUT_FOLDER = 'output'
# os.makedirs(OUTPUT_FOLDER, exist_ok=True)

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

class DialogStates(StatesGroup):
    waiting_for_top_dialog = State()

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª result.json –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–µ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help"
    )

@dp.message(Command("help"))
async def send_welcome(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∫–æ–º–Ω–¥–∞ help.")
    await message.answer(
        """
üìö <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>

1. <b>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö</b>
   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª <code>result.json</code> —á–µ—Ä–µ–∑ –º–µ–Ω—é "–°–∫—Ä–µ–ø–∫–∞"

2. <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</b>
   ‚Ä¢ <b>EDA</b> - –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö (~2 –º–∏–Ω)
   ‚Ä¢ <b>–î–∏–∞–ª–æ–≥–∏</b> - –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º (~15 –º–∏–Ω)
   ‚Ä¢ <b>–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è</b> - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ö–æ–∂–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (~15 –º–∏–Ω)
   ‚Ä¢ <b>–û—á–∏—Å—Ç–∫–∞ –æ—Ç—á–µ—Ç–æ–≤</b> - —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   ‚Ä¢ <b>–°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã</b> - –∞—Ä—Ö–∏–≤ —Å–æ –≤—Å–µ–º–∏ –∞–Ω–∞–ª–∏–∑–∞–º–∏

3. <b>–í–∞–∂–Ω–æ</b>
   - –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
   - –î–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª
   - –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start
    """
    )

@dp.message(lambda message: message.document and message.document.file_name == 'result.json')
async def handle_json_file(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª result.json –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    try:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path

        downloaded_file = await bot.download_file(file_path)
        save_path = os.path.join(UPLOAD_FOLDER, 'result.json')
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª json –≤ {save_path}.")
        with open(save_path, 'wb') as new_file:
            new_file.write(downloaded_file.read())

        logger.info("–§–∞–π–ª result.json —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        await message.answer("–§–∞–π–ª result.json —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        await show_file_buttons(message)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ result.json")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

@dp.message(lambda message: message.document and message.document.file_name != 'result.json')
async def handle_wrong_file(message: types.Message):
    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–≥—Ä—É–∑–∏–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª: {message.document.file_name}")
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–∞–π–ª result.json")

async def show_file_buttons(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ —Å –æ—Ç—á–µ—Ç–∞–º–∏"))
    builder.add(types.KeyboardButton(text="–°–∫–∞—á–∞—Ç—å –ø–∞–ø–∫—É —Å –æ—Ç—á–µ—Ç–∞–º–∏"))
    builder.add(types.KeyboardButton(text="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ result.json"))
    builder.adjust(3)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=builder.as_markup(resize_keyboard=True))

@dp.message(lambda message: message.text == "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ result.json")
async def button1_handler(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫—É result.json")
    await show_main_buttons(message)

@dp.message(lambda message: message.text == "–û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ —Å –æ—Ç—á–µ—Ç–∞–º–∏")
async def clear_reports_folder(message: types.Message):
    try:
        for filename in os.listdir(OUTPUT_FOLDER):
            file_path = os.path.join(OUTPUT_FOLDER, filename)
            if os.path.isfile(file_path) or os.path.islink(file_path):
                os.unlink(file_path)
            elif os.path.isdir(file_path):
                shutil.rmtree(file_path)
        logger.info("–ü–∞–ø–∫–∞ —Å –æ—Ç—á–µ—Ç–∞–º–∏ –æ—á–∏—â–µ–Ω–∞")
        await message.answer("–ü–∞–ø–∫–∞ —Å –æ—Ç—á–µ—Ç–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–ø–∫–∏ —Å –æ—Ç—á–µ—Ç–∞–º–∏")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–ø–∫–∏: {str(e)}")

@dp.message(lambda message: message.text == "–°–∫–∞—á–∞—Ç—å –ø–∞–ø–∫—É —Å –æ—Ç—á–µ—Ç–∞–º–∏")
async def download_reports_folder(message: types.Message):
    try:
        if not os.listdir(OUTPUT_FOLDER):
            await message.answer("–ü–∞–ø–∫–∞ —Å –æ—Ç—á–µ—Ç–∞–º–∏ –ø—É—Å—Ç–∞!")
            return
        zip_filename = "reports.zip"
        zip_path = os.path.join(OUTPUT_FOLDER, zip_filename)
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk(OUTPUT_FOLDER):
                for file in files:
                    if file != zip_filename:
                        file_path = os.path.join(root, file)
                        arcname = os.path.relpath(file_path, OUTPUT_FOLDER)
                        zipf.write(file_path, arcname)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å–∫–∞—á–∞–ª –∞—Ä—Ö–∏–≤ —Å –æ—Ç—á–µ—Ç–∞–º–∏")
        zip_file = FSInputFile(zip_path)
        await message.answer_document(zip_file, caption="–ê—Ä—Ö–∏–≤ —Å –æ—Ç—á–µ—Ç–∞–º–∏")
        os.remove(zip_path)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {str(e)}")

async def show_main_buttons(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="EDA ‚Äî –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"))
    builder.add(types.KeyboardButton(text="–î–∏–∞–ª–æ–≥–∏ ‚Äî –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º"))
    builder.add(types.KeyboardButton(text="–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è ‚Äî –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ö–æ–∂–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"))
    builder.adjust(3)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=builder.as_markup(resize_keyboard=True))

@dp.message(lambda message: message.text == "EDA ‚Äî –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
async def handle_eda(message: types.Message):
    logger.info(f"–ó–∞–ø—É—Å–∫ EDA –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    wait_msg = await message.answer("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ (–ø—Ä–∏–º–µ—Ä–Ω–æ 2 –º–∏–Ω—É—Ç—ã)...")
    await run_eda_script(message)
    await wait_msg.delete()
    await show_file_buttons(message)

async def run_eda_script(message: types.Message):
    try:
        BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# UPLOAD_FOLDER = os.path.join(BASE_DIR, 'input_data')
# os.makedirs(UPLOAD_FOLDER, exist_ok=True)

        script_path = os.path.join(BASE_DIR, "EDA/EDA.py")
        if not os.path.exists(script_path):
            logger.error("–§–∞–π–ª EDA.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return await message.answer("‚ùå –§–∞–π–ª —Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        result = subprocess.run([sys.executable, script_path], capture_output=True, text=True, encoding='utf-8', errors='replace')
        if result.returncode == 0:
            logger.info("EDA –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            await message.answer("‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω")
        else:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ EDA:\n" + result.stderr[:500])
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n{result.stderr[:1000]}")
    except Exception as e:
        logger.exception("–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ EDA")
        await message.answer(f"‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

@dp.message(lambda message: message.text == "–î–∏–∞–ª–æ–≥–∏ ‚Äî –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º")
async def handle_dialogs(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤")
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="top_dialog = 20"))
    builder.add(types.KeyboardButton(text="–≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ top_dialog"))
    builder.adjust(2)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=builder.as_markup(resize_keyboard=True))

@dp.message(lambda message: message.text == "–≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ top_dialog")
async def ask_for_top_dialog(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è top_dialog:")
    await state.set_state(DialogStates.waiting_for_top_dialog)

@dp.message(DialogStates.waiting_for_top_dialog)
async def process_top_dialog(message: types.Message, state: FSMContext):
    try:
        top_dialog = int(message.text)
        await state.update_data(top_dialog=top_dialog)
        await state.clear()
        logger.info(f"–í–≤–µ–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ top_dialog={top_dialog} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
        wait_msg = await message.answer("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        await run_dialog_script(message, top_dialog)
        await wait_msg.delete()
        await show_file_buttons(message)
    except ValueError:
        logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ top_dialog")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")

@dp.message(lambda message: message.text == "top_dialog = 20")
async def handle_top_dialog_20(message: types.Message):
    logger.info("–ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å top_dialog=20")
    wait_msg = await message.answer("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    await run_dialog_script(message, 20)
    await wait_msg.delete()
    await show_file_buttons(message)

async def run_dialog_script(message: types.Message, top_dialog: int):
    try:
        script_path = os.path.join("dialog", "main.py")
        if not os.path.exists(script_path):
            logger.error("–§–∞–π–ª dialog/main.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return await message.answer("‚ùå –§–∞–π–ª —Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        result = subprocess.run([sys.executable, script_path, str(top_dialog)],
                                capture_output=True, text=True, encoding='utf-8', errors='replace')
        if result.returncode == 0:
            logger.info(f"–°–∫—Ä–∏–ø—Ç –¥–∏–∞–ª–æ–≥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å top_dialog={top_dialog}")
            await message.answer(f"‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —Å top_dialog={top_dialog}")
        else:
            logger.error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –¥–∏–∞–ª–æ–≥–∞:\n" + result.stderr[:500])
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n{result.stderr[:1000]}")
    except Exception as e:
        logger.exception("–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤")
        await message.answer(f"‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

@dp.message(lambda message: message.text == "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è ‚Äî –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ö–æ–∂–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
async def handle_topics(message: types.Message):
    logger.info("–ó–∞–ø—É—Å–∫ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏")
    wait_msg = await message.answer("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ (–ø—Ä–∏–º–µ—Ä–Ω–æ 15 –º–∏–Ω—É—Ç)...")
    await run_topics_script(message)
    await wait_msg.delete()
    await show_file_buttons(message)

async def run_topics_script_new(message: types.Message):
    try:
        BASE_DIR = os.path.dirname(os.path.abspath(__file__))
        script_path = os.path.join(BASE_DIR, "main_topics/main.py")

        if not os.path.exists(script_path):
            logger.error("–§–∞–π–ª –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return await message.answer("‚ùå –§–∞–π–ª —Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        process = await asyncio.create_subprocess_exec(
            sys.executable, script_path,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )

        await message.answer("‚è≥ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏...")

        async def stream_output(stream, prefix):
            buffer = ""
            async for line in stream:
                decoded_line = line.decode().strip()
                buffer += decoded_line + "\n"
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –ø–æ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
                if len(buffer) > 1000 or "\n" in decoded_line:
                    await message.answer(f"{prefix} <pre>{buffer.strip()[:4000]}</pre>", parse_mode='HTML')
                    buffer = ""
            if buffer:
                await message.answer(f"{prefix} <pre>{buffer.strip()[:4000]}</pre>", parse_mode='HTML')

        await asyncio.gather(
            stream_output(process.stdout, "üìÑ stdout:"),
            stream_output(process.stderr, "‚ö†Ô∏è stderr:")
        )

        return_code = await process.wait()

        if return_code == 0:
            logger.info("–°–∫—Ä–∏–ø—Ç –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            await message.answer("‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω")
        else:
            logger.error(f"–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {return_code}")
            await message.answer(f"‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {return_code}")

    except Exception as e:
        logger.exception("–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏")
        await message.answer(f"‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


async def run_topics_script(message: types.Message):
    try:
        BASE_DIR = os.path.dirname(os.path.abspath(__file__))
        script_path = os.path.join(BASE_DIR, "main_topics/main.py")
        # script_path = os.path.join("main_topics", "main.py")
        if not os.path.exists(script_path):
            logger.error("–§–∞–π–ª –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return await message.answer("‚ùå –§–∞–π–ª —Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        result = subprocess.run([sys.executable, script_path], 
                                capture_output=True, 
                                text=True, 
                                encoding='utf-8', 
                                errors='replace')
        stdout = result.stdout.strip()
        stderr = result.stderr.strip()
        if result.returncode == 0:
            logger.info("–°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            if stdout:
                await message.answer(f"‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω:\n<pre>{stdout[:4000]}</pre>", parse_mode='HTML')
            else:
                await message.answer("‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ –≤—ã–≤–æ–¥–∞")
        else:
            logger.error("–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:\n" + stderr[:500])
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞:\n<pre>{stderr[:4000]}</pre>", parse_mode='HTML')


        if result.stdout:
            logger.info(f"stdout: {result.stdout[:1000]}")
        if result.returncode == 0:
            logger.info("–°–∫—Ä–∏–ø—Ç –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            await message.answer("‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω")
        else:
            logger.error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏:\n" + result.stderr[:500])
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n{result.stderr[:1000]}")
    except Exception as e:
        logger.exception("–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏")
        await message.answer(f"‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("""
    #############################################
    # –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.                              #
    # –ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É –≤ –¢–µ–ª–µ–≥—Ä–∞–º –≤ –ª–∏—á–∫—É:         #
    # @DigestHelpBot                           #
    #############################################
    """)
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
